import { type NextRequest, NextResponse } from "next/server"
import { sql } from "@/lib/neon"
import bcrypt from "bcryptjs"

// Verificar se √© super admin
function isSuperAdmin(email: string): boolean {
  return email === "carlos.oldenburg@videosoft.com.br"
}

export async function GET(request: NextRequest) {
  try {
    // Verificar autentica√ß√£o (simplificado para demo)
    const authHeader = request.headers.get("authorization")

    console.log("üîç Buscando usu√°rios...")

    const users = await sql`
      SELECT id, email, name, role, created_at 
      FROM users 
      ORDER BY created_at DESC
    `

    console.log("‚úÖ Usu√°rios encontrados:", users.length)

    return NextResponse.json(users)
  } catch (error) {
    console.error("‚ùå Erro ao buscar usu√°rios:", error)
    return NextResponse.json({ error: "Erro interno do servidor" }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const { email, password, name, role = "user" } = await request.json()

    console.log("üë§ Criando usu√°rio:", { email, name, role })

    // Verificar se usu√°rio j√° existe
    const existingUser = await sql`
      SELECT id FROM users WHERE email = ${email}
    `

    if (existingUser.length > 0) {
      return NextResponse.json({ error: "Usu√°rio j√° existe" }, { status: 400 })
    }

    // Hash da senha
    const hashedPassword = await bcrypt.hash(password, 10)

    // Criar usu√°rio
    const newUser = await sql`
      INSERT INTO users (email, password, name, role, created_at)
      VALUES (${email}, ${hashedPassword}, ${name}, ${role}, NOW())
      RETURNING id, email, name, role, created_at
    `

    console.log("‚úÖ Usu√°rio criado:", newUser[0])

    return NextResponse.json(newUser[0])
  } catch (error) {
    console.error("‚ùå Erro ao criar usu√°rio:", error)
    return NextResponse.json({ error: "Erro ao criar usu√°rio" }, { status: 500 })
  }
}

export async function PATCH(request: NextRequest) {
  try {
    const { userId, role } = await request.json()

    console.log("üîÑ Atualizando papel do usu√°rio:", { userId, role })

    const updatedUser = await sql`
      UPDATE users 
      SET role = ${role}
      WHERE id = ${userId}
      RETURNING id, email, name, role, created_at
    `

    if (updatedUser.length === 0) {
      return NextResponse.json({ error: "Usu√°rio n√£o encontrado" }, { status: 404 })
    }

    console.log("‚úÖ Papel atualizado:", updatedUser[0])

    return NextResponse.json(updatedUser[0])
  } catch (error) {
    console.error("‚ùå Erro ao atualizar usu√°rio:", error)
    return NextResponse.json({ error: "Erro ao atualizar usu√°rio" }, { status: 500 })
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const { userId } = await request.json()

    console.log("üóëÔ∏è Deletando usu√°rio:", userId)

    // Verificar se n√£o √© o super admin
    const user = await sql`
      SELECT email FROM users WHERE id = ${userId}
    `

    if (user.length > 0 && user[0].email === "carlos.oldenburg@videosoft.com.br") {
      return NextResponse.json({ error: "N√£o √© poss√≠vel deletar o super admin" }, { status: 400 })
    }

    // Deletar tarefas do usu√°rio primeiro
    await sql`DELETE FROM tasks WHERE user_id = ${userId}`

    // Deletar resumos do usu√°rio
    await sql`DELETE FROM daily_summaries WHERE user_id = ${userId}`

    // Deletar usu√°rio
    await sql`DELETE FROM users WHERE id = ${userId}`

    console.log("‚úÖ Usu√°rio deletado com sucesso")

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("‚ùå Erro ao deletar usu√°rio:", error)
    return NextResponse.json({ error: "Erro ao deletar usu√°rio" }, { status: 500 })
  }
}
